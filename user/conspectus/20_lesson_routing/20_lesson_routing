----- 20 lesson routing -----

На данный момент у нас при нажатии на ссылки в Navbar.jsx перезагружается вся страница, а нам это не нужно.
Мы не хотим использовать эти ссылки, чтобы не было этих переключений.
Пока что вот так выглядит этот код:

import React from 'react';
import s from './Navbar.module.css';

import React from 'react'
import s from './Navbar.module.css'

const Navbar = () => {
  return (
    <nav className={s.nav}>
      <div className={s.item}>
        <a href='/profile'>Profile</a>
      </div>
      <div className={`${s.item} ${s.active}`}>
        <a href='/dialogs'>Messages</a>
      </div>
      <div className={s.item}>
        <a href='/News'>News</a>
      </div>
      <div className={s.item}>
        <a href='/Music'>Music</a>
      </div>
      <div className={s.item}>
        <a href='/Settings'>Settings</a>
      </div>
    </nav>
  )
}

export default Navbar

Наша задача не перезагружая страницу изменить адресную строку в веб-браузере. В адресной строке 
адрес изменится. В файле App.jsx в этих строках происходит ожидание:
<Route path='/dialogs' element={<Dialogs />} />
<Route path='/profile' element={<Profile />} />
<Route path='/news' element={<News />} />
<Route path='/music' element={<Music />} />
<Route path='/settings' element={<Settings />} />

Ожидание - они смотрят какой-же адрес сейчас в браузерной строке. Им не обязательно перезагружать
страницу. Они типа слушатели адреса.  

----- Здесь производим изменения -----
В файле Navbar.jsx в ссылках строк типа: 
<a href='/profile'>Profile</a>

изменяем теги <a> на теги <NavLink>
получилась такая строка: 
 <NavLink to='/profile'>Profile</NavLink>

- Далее обязательно не забываем делать import вверху страницы:
import { NavLink } from 'react-router-dom'

(NavLink это компонента, и у нее есть атрибут to , и все эти атрибуты по итогу превращаются в props)

----- После этих изменений страница не перезагружается -----
Мы нажимаем на ссылки, и теперь страница не перегагружается, она не моргает. Для того чтобы убедиться
что страница не перзагружается мы открываем консоль браузера. 
Заходим в Network, очищаем историю кнопкой Clear Networking Log (перечеркнутый крудок), и кликаем по нашим 
ссылкам в сайдбаре сайта. И видим что ничего нового в Network не приходит. 

- Заходим в консоли браузера в Navbar и смотрим что у элементов Navbar_item остаются обычные ссылки 
с тегами <a>
То есть наши NavLink превратились в обычные ссылки <a> 


----- Делаем золотой цвет у активной ссылки -----
в файле Navbar.module.css добавляем правило
.item a.active {
  color: gold;
}

В консоли браузера проверим наличие этого класса active внутри элемента Navbar_item в ссылке, 
и видим что он есть. Класс active появляется только когда мы кликаем по ссылке Profile на сайте.
То есть когда мы находимся на этой странице, и пропадает когда уходим с нее.

Класс active появляется на той странице на которую мы заходим. Кликаем курсором по всем имеющимся у нас
ссылкам и видим что этот класс появляется на активной странице, то есть на той странице на которую мы 
заходим, нажимая на ссылку курсором.

!!!Но почему то активная ссылка не меняет цвет с белого на золотой. Не меняет на тот цвет, который мы указали
в этом правиле внутри файла Navbar.module.css:

.item a.active {
  color: gold;
}

-- Ищем причину --
- Идем в консоль браузера в стили. Открываем head и там ищем стили Navbar
- Открываем и видим это:

.Navbar_item__T04AK a.Navbar_active__em\+eI {
  color: gold;
}

- Мы видим, что в класс добавился active , а после active мы видим постфиксную запись:
active__em\+eI

-- И вот почему так происходит:
У нас css-модульность
Это значит, что все классы которые обозначены в файле Navbar.module.css трансформируются.
И получается что в браузере класса active нет, а есть класс active с постфиксной записью.


-- ??И как же нам сказать нашему Навлинку эй! NavLink , а мог бы ты добавлять активным ссылкам 
не класс active , а какой нибудь другой класс?

- Сначала для удобства восприятия переименуем класс active в activeLink
Это нужно сделать сначала в файле Navbar.module.css
вот так:
.item a.activeLink {
  color: gold;
}

-- И мы можем сказать это так:

В строке <NavLink to='/profile'>Profile</NavLink>

Мы пишем так:
<div className={s.item}>
        <NavLink
          to='/profile'
          className={({ isActive }) => (isActive ? s.activeLink : '')}
        >
          Profile
        </NavLink>

Давай ты будешь добавлять активным ссылкам не просто класс active , а вот так:
className={({ isActive }) => (isActive ? s.activeLink : '')}
        > 

Таким образом мы поведение NavLink перепрограммируем, теперь по умолчанию будет добавляться вот этот
класс, а не просто класс active (Но я пока ни хуя не понял, что он говорит)


- Теперь проверим в консоли браузера, что же добавилось теперь. 
Кликаем мышкой по ссылке Profile и видим что цвет активной ссылки стал gold

 Реализуем это в каждой строке для ссылок.


 













